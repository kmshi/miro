/*
# Miro - an RSS based video player application
# Copyright (C) 2005-2008 Participatory Culture Foundation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#
# In addition, as a special exception, the copyright holders give
# permission to link the code of portions of this program with the OpenSSL
# library.
#
# You must obey the GNU General Public License in all respects for all of
# the code used other than OpenSSL. If you modify file(s) with this
# exception, you may extend this exception to your version of the file(s),
# but you are not obligated to do so. If you do not wish to do so, delete
# this exception statement from your version. If you delete this exception
# statement from all source files in the program, then also delete it here.
*/

#include "nsISupports.idl"

interface nsIDOMWindow;
interface nsIDOMDocument;
interface nsICommandLine;

[scriptable, uuid(8ABB2E1D-6624-4457-A4BD-EBFA6156D426)]
interface pcfIDTVPyBridge : nsISupports
{
  /**
   * Called on application startup.
   */
  AString getStartupError();
  void onStartup(in nsIDOMWindow window);
  void onShutdown();
  void handleCommandLine(in nsICommandLine commandLine);
  void pageLoadFinished(in AString area, in AString url);
  void performSearch(in AString engine, in AString query);
  void setVolume(in float volume);
  void quit();
  void removeCurrentChannel();
  void updateCurrentChannel();
  void updateChannels();
  void showHelp();
  void reportBug();
  void addChannel();
  void copyChannelLink();
  void handleContextMenu(in unsigned long index);
  void handleSimpleDialog(in unsigned long id, 
        in unsigned short buttonIndex);
  void handleCheckboxDialog(in unsigned long id, 
        in unsigned short buttonIndex, 
        in boolean checkbox_value);
  void handleCheckboxTextboxDialog(in unsigned long id, 
        in unsigned short buttonIndex, 
        in boolean checkbox_value, in AString textbox_value);
  void handleHTTPAuthDialog(in unsigned long id, 
          in unsigned short buttonIndex, in AString username, 
          in AString password);
  void handleTextEntryDialog(in unsigned long id, 
        in unsigned short buttonIndex, in AString text);
  void handleSearchChannelDialog(in unsigned long id, 
        in unsigned short buttonIndex, in AString term,
        in unsigned short style, in AString loc);
  void handleFileDialog(in unsigned long id, in AString pathname);
  void openURL(in AString url);
  void loadURLInBrowser(in AString browserAreaId, in AString url);
  void skip(in short step);
  void skipPrevious();
  void onMovieFinished();
  void stop();
  void playPause();
  void pause();
  void playUnwatched();
  void pauseDownloads();
  void resumeDownloads();
  void openFile(in AString path);
  void deleteVLCCache();
  AString shortenDirectoryName(in AString path);
  boolean getRunAtStartup();
  void setRunAtStartup(in boolean value);
  short getCheckEvery();
  void setCheckEvery(in short value);
  AString getAutoDownloadDefault();
  void setAutoDownloadDefault(in AString value);
  AString getMoviesDirectory();
  void changeMoviesDirectory(in AString path, in boolean migrate);
  boolean getLimitUpstream();
  void setLimitUpstream(in boolean value);
  short getLimitUpstreamAmount();
  void setLimitUpstreamAmount(in short value);
  boolean getLimitDownstream();
  void setLimitDownstream(in boolean value);
  short getLimitDownstreamAmount();
  void setLimitDownstreamAmount(in short value);
  short getMaxManual();
  void setMaxManual(in short value);
  short getMaxAuto();
  void setMaxAuto(in short value);
  void startPrefs();
  void updatePrefs();
  boolean getPreserveDiskSpace();
  void setPreserveDiskSpace(in boolean value);
  float getPreserveDiskSpaceAmount();
  void setPreserveDiskSpaceAmount(in float value);
  short getExpireAfter();
  void setExpireAfter(in short value);
  boolean getSinglePlayMode();
  void setSinglePlayMode(in boolean value);
  short getBTMinPort();
  void setBTMinPort(in short value);
  short getBTMaxPort();
  void setBTMaxPort(in short value);
  boolean getStartupTasksDone();
  void setStartupTasksDone(in boolean value);
  boolean getResumeVideosMode();
  void setResumeVideosMode(in boolean value);
  boolean getWarnIfDownloadingOnQuit();
  void setWarnIfDownloadingOnQuit(in boolean value);
  boolean getUseUpnp();
  void setUseUpnp(in boolean value);
  boolean getBitTorrentEncReq();
  void setBitTorrentEncReq(in boolean value);
  void showCursor(in boolean display);
  void createNewPlaylist();
  void createNewPlaylistFolder();
  void createNewSearchChannel();
  void createNewChannelFolder();
  void createNewDownload();
  void importChannels();
  void exportChannels();
  void handleDrop(in AString dropData, in AString dropType, in AString sourceData);
  void removeCurrentSelection();
  void checkForUpdates();
  void removeCurrentItems();
  void copyCurrentItemURL();
  void selectAllItems();
  void createNewChannelGuide();
  void renameCurrentChannel();
  void recommendCurrentChannel();
  void renameCurrentPlaylist();
  void removeCurrentPlaylist();
  void openDonatePage();
  void openBugTracker();
  void saveVideoFile(in AString path);
  void startupDoSearch(in AString path);
  void startupCancelSearch();
  AString getSpecialFolder(in AString name);
  void extractFinish(in float duration, in boolean screenshot_success);
  void createProxyObjects();
  void printOut(in AString output);
  void addMenubar(in nsIDOMDocument doc);
  void updateTrayMenus();
  void getLabel(in AString action, in AString state, in PRInt32 unwatched, in PRInt32 downloading, in PRInt32 paused, out AString label);
  void addDirectoryWatch(in AString filename);
  void removeDirectoryWatch(in AString id);
  void toggleDirectoryWatchShown(in AString id);
  boolean minimizeToTray();
  void setMinimizeToTray(in boolean newSetting);
  void handleKeyPress(in short keycode, in boolean controlDown, in boolean shiftDown);
  void handleCloseButton();
};
