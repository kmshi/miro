/*
 * Miro - an RSS based video player application
 * Copyright (C) 2005-2007 Participatory Culture Foundation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
*/

#include "nsISupports.idl"

interface nsIDOMWindow;
interface nsIDOMDocument;
interface nsIDOMNode;
interface nsIVariant;

[scriptable, uuid(7E70142F-ABC9-4d6e-BDB8-EDC747FCD2A3)]
interface pcfIDTVJSBridge : nsISupports
{
  void init(in nsIDOMWindow window);
  void maximizeWindow();
  void closeWindow();
  void xulNavigateDisplay(in AString area, in AString uri);
  void xulAddElementAtEnd(in AString area, in AString xml, in AString id);
  void xulAddElementBefore(in AString area, in AString xml, in AString id);
  void xulRemoveElement(in AString area, in AString id);
  void xulChangeElement(in AString area, in AString id, in AString xml);
  void xulChangeAttribute(in AString area, in AString id, in AString name, in AString value);
  void xulRemoveAttribute(in AString area, in AString id, in AString name);
  void xulHideElement(in AString area, in AString id);
  void xulShowElement(in AString area, in AString id);
  void copyTextToClipboard(in AString text);
  void showContextMenu(in AString menuItems);
  void showSearchMenu();
  void showChoiceDialog(in unsigned long id, in AString title, 
        in AString description, in AString defaultLabel, 
        in AString otherLabel);
  void showCheckboxDialog(in unsigned long id, in AString title, 
        in AString description, in AString defaultLabel, 
        in AString otherLabel, in AString checkboxText,
        in boolean checkboxValue);
  void showCheckboxTextboxDialog(in unsigned long id, in AString title, 
        in AString description, in AString defaultLabel, 
        in AString otherLabel, in AString checkboxText,
        in boolean checkboxValue, in AString textboxText);
  void showThreeChoiceDialog(in unsigned long id, in AString title, 
        in AString description, in AString defaultLabel, 
        in AString secondLabel, in AString thirdLabel);
  void showMessageBoxDialog(in unsigned long id, in AString title, 
        in AString description);
  void showHTTPAuthDialog(in unsigned long id, in AString description);
  void showTextEntryDialog(in unsigned long id, in AString title, 
        in AString description, in AString defaultLabel, 
        in AString otherLabel, in AString prefillText);
  void showSearchChannelDialog(in unsigned long id, in nsISupports channels,
 	in nsISupports engines, in AString defaultTerm,
	in unsigned short defaultStyle, in unsigned long defaultChannel,
	in unsigned long defaultEngine, in AString defaultURL);
  void showUpdateAvailableDialog(in unsigned long id, in AString title, 
        in AString description, in AString defaultLabel, 
        in AString otherLabel, in AString releaseNotes);
  void showBugReportDialog(in AString when, in AString report);
  void showVideoDisplay();
  void hideVideoDisplay();
  void positionVolumeSlider(in float volume);
  void toggleFullscreen();
  void enterFullscreen();
  void leaveFullscreen();
  void setActionGroupEnabled(in AString group, in boolean enabled);
  void updateVideoFilename(in AString newFilename);
  void saveVideo();
  void setSliderText(in PRInt32 elasped);
  void setDuration(in PRInt32 elasped);
  void moveSlider(in float fractionDone);
  void performStartupTasks();
  void updateSearchProgress (in AString message);
  void searchFinished (in AString message);
  void searchCancelled (in AString message);
  void setSearchEngine (in AString engine);
  void setSearchEngineInfo(in nsIVariant names, in nsIVariant titles);
  void updateMenus(in nsIVariant plurals);
  void updateTrayMenus(in PRInt32 unwatched, in PRInt32 downloading, in PRInt32 paused);
  void setPrefDocument(in nsIDOMDocument document);
  void directoryWatchAdded(in AString id, in AString dirname, in boolean shown);
  void directoryWatchRemoved(in AString id);
  void showPopup(in PRInt32 x, in PRInt32 y);
  void hidePopup();
  void showOpenDialog(in unsigned long id, in AString title, in AString defaultDirectory, in AString typesString, in nsIVariant types);
  void showSaveDialog(in unsigned long id, in AString title, in AString defaultDirectory, in AString defaultFilename);
};
